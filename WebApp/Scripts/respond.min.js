/* 
 * NUGET: BEGIN LICENSE TEXT
 *
 * Microsoft grants you the right to use these script files for the sole
 * purpose of either: (i) interacting through your browser with the Microsoft
 * website or online service, subject to the applicable licensing or use
 * terms; or (ii) using the files as included with a Microsoft product subject
 * to that product's license terms. Microsoft reserves all other rights to the
 * files not expressly granted by Microsoft, whether by implication, estoppel
 * or otherwise. Insofar as a script file is dual licensed under GPL,
 * Microsoft neither took the code under GPL nor distributes it thereunder but
 * under the terms set out in this paragraph. All notices and licenses
 * below are for informational purposes only.
 *
 * NUGET: END LICENSE TEXT
 */

/* 
 * matchMedia() polyfill - Test a CSS media type/query in JS.
 * Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas.
 * Dual MIT/BSD license
 */

// If matchMedia is already supported, no need to continue
if (window.matchMedia && window.matchMedia("only all").matches) {
  return;
}

// Create a helper function for testing media queries
window.matchMedia = (function (document) {
  var div = document.createElement("div");
  div.id = "mq-test-1";
  div.style.cssText = "position:absolute;top:-100em";
  document.documentElement.insertBefore(div, document.documentElement.firstChild);

  return function (media) {
    div.innerHTML = "&shy;<style media=\"" + media + "\"> #mq-test-1 { width: 42px; }</style>";
    var matches = div.offsetWidth === 42;
    document.documentElement.removeChild(div);
    return { matches: matches, media: media };
  };
})(document);

// Respond.js v1.2.0: min/max-width media query polyfill
// (c) Scott Jehl. MIT/GPLv2 Lic. j.mp/respondjs
(function (window) {
  var respond = {};

  // Check if media queries are supported
  respond.mediaQueriesSupported = window.matchMedia && window.matchMedia("only all").matches;

  if (respond.mediaQueriesSupported) {
    return;
  }

  // Create helper functions for handling media queries
  var document = window.document,
      documentElement = document.documentElement,
      head = document.getElementsByTagName("head")[0] || documentElement,
      baseElement = document.getElementsByTagName("base")[0],
      links = head.getElementsByTagName("link"),
      mediaQueries = [],
      styleSheets = [];

  // Function for checking if a stylesheet is in the cache
  function checkCache(href) {
    for (var i = 0; i < styleSheets.length; i++) {
      if (styleSheets[i].href === href) {
        return true;
      }
    }
    return false;
  }

  // Function for loading a stylesheet
  function loadStylesheet(href, media) {
    if (checkCache(href)) {
      return;
    }
    var link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = href;
    link.media = media;
    head.insertBefore(link, head.firstChild);
    styleSheets.push(link);
  }

  // Function for parsing media queries
  function parseMediaQueries() {
    for (var i = 0; i < links.length; i++) {
      var link = links[i];
      if (link.rel && link.rel.toLowerCase() === "stylesheet") {
        if (link.media) {
          mediaQueries.push(link.media);
        }
        loadStylesheet(link.href, link.media);
      }
    }
  }

  // Function for checking if media queries need to be updated
  function checkMediaQueries() {
    for (var i = 0; i < mediaQueries.length; i++) {
      var media = mediaQueries[i];
      if (window.matchMedia("(" + media + ")").matches) {
        loadStylesheet(links[i].href, media);
      }
    }
  }

  // Parse media queries and check if any need to be updated
  parseMediaQueries();
  checkMediaQueries();

  // Check media queries on window resize
  window.addEventListener("resize", checkMediaQueries);

})(window);
