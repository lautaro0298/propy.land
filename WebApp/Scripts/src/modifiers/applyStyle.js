import setStyles from '../utils/setStyles';
import setAttributes from '../utils/setAttributes';
import getReferenceOffsets from '../utils/getReferenceOffsets';
import computeAutoPlacement from '../utils/computeAutoPlacement';

/**
 * A modifier function to apply styles and attributes to the popper and arrow elements.
 * @memberof Modifiers
 * @param {Object} data - The data object generated by `update` method
 * @param {Object} data.styles - List of style properties - values to apply to popper element
 * @param {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @param {Object} data.arrowStyles - List of style properties - values to apply to arrow element
 * @param {Object} options - Modifiers configuration and options
 * @param {HTMLElement} options.popper - The HTML element used as popper
 * @param {HTMLElement} options.arrowElement - The HTML element used as arrow
 * @returns {Object} The modified data object
 */
export default {
  name: 'applyStyle',
  /** @this {Modifier} */
  function applyStyle(data) {
    // Set styles for popper
    setStyles(data.instance.popper, data.styles);
    setAttributes(data.instance.popper, data.attributes);

    // Set styles for arrow
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }

    return data;
  },

  /**
   * A modifier function to apply styles and attributes to the popper and arrow elements on load.
   * @memberof Modifiers
   * @param {Object} data - The data object generated by `update` method
   * @param {Object} options - Modifiers configuration and options
   * @param {HTMLElement} options.popper - The HTML element used as popper
   * @param {HTMLElement} options.arrowElement - The HTML element used as arrow
   * @returns {Object} The modified data object
   */
  applyStyleOnLoad({ styles, attributes, arrowStyles }, options) {
    // Compute reference element offsets
    const referenceOffsets = getReferenceOffsets(options, options.popper);

    // Compute auto placement, store placement inside the data object
    const placement = computeAutoPlacement(
      options.placement,
      referenceOffsets,
      options.popper,
      options.reference,
      options.modifiers.flip.boundariesElement,
      options.modifiers.flip.padding
    );

    // Set x-placement attribute
    options.popper.setAttribute('x-placement', placement);

    // Set position for popper
    setStyles(options.popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

    // Set styles for popper and arrow
    this.applyStyle({ styles, attributes, arrowStyles }, options);

    return options;
  },
};
