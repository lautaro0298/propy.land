/* -*- Mode: js; js-indent-level: 2; -*- */

const yargs = require('yargs');

const GREATEST_LOWER_BOUND = 1;
const LEAST_UPPER_BOUND = 2;

function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  while (true) {
    const mid = Math.floor((aHigh - aLow) / 2) + aLow;
    const cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      return mid;
    }
    if (aHigh - mid <= 1) {
      if (aBias === LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
    if (cmp > 0) {
      aLow = mid;
    } else {
      aHigh = mid;
    }
  }
}

function search(aNeedle, aHaystack, aCompare, aBias) {
  const index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias);
  if (index < 0) {
    return -1;
  }

  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
}

const argv = yargs
  .option('array', {
    alias: 'a',
    description: 'The array to search',
    type: 'array',
    demandOption: true,
  })
  .option('needle', {
    alias: 'n',
    description: 'The element to search for',
    type: 'number',
    demandOption: true,
  })
  .option('compare', {
    alias: 'c',
    description: 'The comparison function',
    type: 'function',
    demandOption: true,
  })
  .option('bias', {
    alias: 'b',
    description: 'The bias to use',
    choices: [GREATEST_LOWER_BOUND, LEAST_UPPER_BOUND],
    default: GREATEST_LOWER_BOUND,
  })
  .help()
  .alias('help', 'h')
  .argv;

const array = argv.array;
const needle = argv.needle;
const compare = argv.compare;
const bias = argv.bias;

if (array.length === 0) {
  console.error('Error: array cannot be empty');
  process.exit(1);
}

if (typeof compare !== 'function') {
  console.error('Error: compare must be a function');
  process.exit(1);
}

const result = search(needle, array, compare, bias);
console.log(result);


node binary_search.js --array=[1,2,3,4,5] --needle=3 --compare=(a, b) => a - b --bias=1
