import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

import loadConfig from "./config.js";
import type { InputOptions, ResolvedConfig } from "./config.js";
import { run } from "./transformation.js";
import type { FileResult, FileResultCallback } from "./transformation.js";
import transformFileBrowser from "./transform-file-browser.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

type TransformFile = {
  (filename: string, callback: FileResultCallback): void;
  (
    filename: string,
    opts?: InputOptions | null,
    callback?: FileResultCallback,
  ): void;
};

const transformFileRunner = async (
  filename: string,
  opts?: InputOptions,
): Promise<FileResult | null> => {
  const options = { ...opts, filename };

  const config: ResolvedConfig | null = await loadConfig(options);
  if (config === null) return null;

  const code = await fs.readFile(filename, "utf8");
  return await run(config, code);
};

const transformFile: TransformFile = async (
  filename,
  optsOrCallback?,
  callback?,
) => {
  if (typeof optsOrCallback === "function") {
    callback = optsOrCallback;
    optsOrCallback = undefined;
  }

  try {
    const result = await transformFileRunner(filename, optsOrCallback);
    if (callback) callback(null, result);
  } catch (err) {
    if (callback) callback(err);
  }
};

const transformFileSync = async (filename: string, opts?: InputOptions) => {
  const result = await transformFileRunner(filename, opts);
  return result;
};

const transformFileAsync = transformFileRunner;

export { transformFile, transformFileSync, transformFileAsync };

// Load the transform-file-browser module and override the transformFile function with its
// default export. This allows for dynamic replacement of this module with transform-file-browser
// at bundle time.
const transformFileBrowserModule = await import("./transform-file-browser.js");
transformFile = transformFileBrowserModule.default;

