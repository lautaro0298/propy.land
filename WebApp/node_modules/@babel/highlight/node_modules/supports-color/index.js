'use strict';
const os = require('os');
const hasFlag = require('has-flag');

const env = process.env;

const forceColorValue = hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ? false :
	hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always') ? true :
	env.FORCE_COLOR && env.FORCE_COLOR.length !== 0 && parseInt(env.FORCE_COLOR, 10) !== 0;

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	const forceColor = forceColorValue !== false;

	if (!forceColor) {
		return 0;
	}

	const hasTrueColorFlag = hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor');

	const has256ColorFlag = hasFlag('color=256');

	if (hasTrueColorFlag) {
		return 3;
	}

	if (has256ColorFlag) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const minLevel = forceColor ? 1 : 0;

	if (os.platform() === 'win32') {
		const osRelease = os.release().split('.');
		const nodeVersion = process.versions.node.split('.');

		if (
			Number.parseInt(nodeVersion[0]) >= 8 &&
			Number.parseInt(osRelease[0]) >= 10 &&
			Number.parseInt(osRelease[2]) >= 10586
		) {
			return Number.parseInt(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	const ciEnvs = ['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'codeship'];

	if (env.hasOwnProperty('CI') && ciEnvs.some(sign => env.hasOwnProperty(sign))) {
		return 1;
	}

	if (env.hasOwnProperty('TEAMCITY_VERSION')) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.hasOwnProperty('COLORTERM') && env.COLORTERM === 'truecolor') {
		return 3;
	}

	const termProgramEnvs = ['iTerm.app', 'Apple_Terminal'];

	if (env.hasOwnProperty('TERM_PROGRAM') && termProgramEnvs.includes(env.TERM_PROGRAM)) {
		const version = Number.parseInt(env.TERM_PROGRAM_VERSION.split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	const
