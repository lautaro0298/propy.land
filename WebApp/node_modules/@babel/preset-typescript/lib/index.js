'use strict';

import { OptionValidator } from '@babel/helper-validator-option';
import { transformFromAstSync } from '@babel/core';
import { parseSync } from '@babel/parser';
import * as t from '@babel/types';
import { parse as parseYaml } from 'yaml';
import { HelperPlugin } from '@babel/helper-plugin-utils';
import * as ts from 'typescript';
import * as tsParser from '@babel/parser';

const transformTypeScript = require('@babel/plugin-transform-typescript');

const v = new OptionValidator('@babel/preset-typescript');

const validateStringOption = v.validateStringOption.bind(v);
const validateBooleanOption = v.validateBooleanOption.bind(v);
const validateYamlObjectOption = v.validateYamlObjectOption.bind(v);

const TopLevelOptions = {
  allExtensions: 'allExtensions',
  allowNamespaces: 'allowNamespaces',
  disallowAmbiguousJSXLike: 'disallowAmbiguousJSXLike',
  isTSX: 'isTSX',
  jsxPragma: 'jsxPragma',
  jsxPragmaFrag: 'jsxPragmaFrag',
  onlyRemoveTypeImports: 'onlyRemoveTypeImports',
  optimizeConstEnums: 'optimizeConstEnums',
} as const;

interface NormalizedOptions {
  allExtensions: boolean;
  allowNamespaces: boolean;
  disallowAmbiguousJSXLike: boolean;
  isTSX: boolean;
  jsxPragma: string | undefined;
  jsxPragmaFrag: string;
  onlyRemoveTypeImports: boolean;
  optimizeConstEnums: boolean;
}

function normalizeOptions(options: object = {}): NormalizedOptions {
  const {
    allowNamespaces = true,
    jsxPragma,
    jsxPragmaFrag = 'React.Fragment',
    onlyRemoveTypeImports = false,
    optimizeConstEnums = false,
    ...otherOptions
  } = options;

  const allExtensions = validateBooleanOption(TopLevelOptions.allExtensions, otherOptions.allExtensions, false);
  const isTSX = validateBooleanOption(TopLevelOptions.isTSX, otherOptions.isTSX, false);

  if (isTSX) {
    v.invariant(allExtensions, `${TopLevelOptions.isTSX} requires ${TopLevelOptions.allExtensions}`);
  }

  const disallowAmbiguousJSXLike = validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, otherOptions.disallowAmbiguousJSXLike, false);

  if (disallowAmbiguousJSXLike) {
    v.invariant(allExtensions, `${TopLevelOptions.disallowAmbiguousJSXLike} requires ${TopLevelOptions.allExtensions}`);
  }

  return {
    allExtensions,
    allowNamespaces,
    disallowAmbiguousJSXLike,
    isTSX,
    jsxPragma,
    jsxPragmaFrag,
    onlyRemoveTypeImports,
    optimizeConstEnums,
  };
}

const plugin: HelperPlugin<NormalizedOptions> = (api, opts) => {
  api.assertVersion(7);

  const normalizedOptions = normalizeOptions(opts);

  const pluginOptions = (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({
    allowDeclareFields: opts.allowDeclareFields,
    allowNamespaces: normalizedOptions.allowNamespaces,
    disallowAmbiguousJSXLike,
    isTSX,
    jsxPragma: normalizedOptions.jsxPragma,
    jsxPragmaFrag: normalizedOptions.jsxPragmaFrag,
    onlyRemoveTypeImports: normalizedOptions.onlyRemoveTypeImports,
    optimizeConstEnums: normalizedOptions.optimizeConstEnums,
  });

  return {
    overrides: normalizedOptions.allExtensions
      ? [
          {
            plugins: [[transformTypeScript, pluginOptions(normalizedOptions.isTSX, normalizedOptions.disallowAmbiguousJSXLike)]],
          },
        ]
      : [
          {
            test: /\.ts$/,
            plugins: [[transformTypeScript, pluginOptions(false, false)]],
          },
          {
            test: /\.mts$/,
            sourceType: 'module',
            plugins: [[transformTypeScript, pluginOptions(false, true)]],
          },
          {
            test: /\.cts$/,
            sourceType: 'script',
            plugins: [[transformTypeScript, pluginOptions(false, true)]],
          },
          {
            test: /\.tsx$/,
            plugins: [[transformTypeScript, pluginOptions(true, false)]],
          },
        ],
  };
};

plugin.displayName = 'preset-typescript';

export = plugin;
