// AwaitValue.js

class AwaitValue {
  constructor(value) {
    this.wrapped = value;
  }

  static resolve(value) {
    return new AwaitValue(value);
  }

  static reject(error) {
    return Promise.reject(new AwaitValue(error));
  }

  then(resolveCallback, rejectCallback) {
    return new Promise((resolve, reject) => {
      if (this.wrapped instanceof Error) {
        reject(rejectCallback(this.wrapped));
      } else {
        resolve(resolveCallback(this.wrapped));
      }
    });
  }

  catch(rejectCallback) {
    return new Promise((resolve, reject) => {
      reject(rejectCallback(this.wrapped));
    });
  }

  static all(promises) {
    return Promise.all(promises.map(promise => {
      if (promise instanceof AwaitValue) {
        return promise.wrapped;
      } else {
        return promise;
      }
    }));
  }

  static race(promises) {
    return Promise.race(promises.map(promise => {
      if (promise instanceof AwaitValue) {
        return promise.wrapped;
      } else {
        return promise;
      }
    }));
  }
}

module.exports = AwaitValue;
