let REACT_ELEMENT_TYPE;

function getReactElementType() {
  if (!REACT_ELEMENT_TYPE) {
    if ("function" === typeof Symbol && Symbol.for && Symbol.for("react.element")) {
      REACT_ELEMENT_TYPE = Symbol.for("react.element");
    } else {
      REACT_ELEMENT_TYPE = 60103;
    }
  }
  return REACT_ELEMENT_TYPE;
}

function mergeDefaultProps(type, props) {
  if (type && type.defaultProps) {
    return Object.assign({}, type.defaultProps, props);
  }
  return props || {};
}

function createChildrenArray(children) {
  if (Array.isArray(children)) {
    return children;
  } else if (null != children) {
    return [children];
  }
  return [];
}

export default function createRawReactElement(type, props, key, ...children) {
  const childrenLength = children.length;
  const defaultProps = type ? type.defaultProps : undefined;

  props = mergeDefaultProps(type, props);

  if (childrenLength) {
    props.children = createChildrenArray(children);
  }

  return {
    $$typeof: getReactElementType(),
    type: type,
    key: key == null ? null : "" + key,
    ref: null,
    props: props,
    _owner: null
  };
}
