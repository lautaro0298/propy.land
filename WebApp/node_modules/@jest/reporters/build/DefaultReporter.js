'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

const { bold, cyan } = require('chalk');
const { getResultHeader } = require('./getResultHeader');
const { getSnapshotStatus } = require('./getSnapshotStatus');
const { isInteractive } = require('jest-util');
const { BaseReporter } = require('./BaseReporter');
const { Status } = require('./Status');

const TITLE_BULLET = bold('\u25cf ');

class DefaultReporter extends BaseReporter {
  constructor(globalConfig) {
    super();

    this.name = 'DefaultReporter';

    this._clear = '';
    this._globalConfig = globalConfig;
    this._out = process.stdout.write.bind(process.stdout);
    this._err = process.stderr.write.bind(process.stderr);
    this._status = new Status();
    this._bufferedOutput = new Set();

    this._wrapStdio(process.stdout);
    this._wrapStdio(process.stderr);

    this._status.onChange(() => {
      this._clearStatus();
      this._printStatus();
    });
  }

  async _wrapStdio(stream) {
    const originalWrite = stream.write;
    let buffer = [];
    let timeout = null;

    const flushBufferedOutput = () => {
      const string = buffer.join('');
      buffer = [];

      this._clearStatus();

      if (string) {
        originalWrite.call(stream, string);
      }

      this._printStatus();

      this._bufferedOutput.delete(flushBufferedOutput);
    };

    this._bufferedOutput.add(flushBufferedOutput);

    const debouncedFlush = () => {
      if (stream === process.stderr) {
        flushBufferedOutput();
      } else {
        timeout = setTimeout(() => {
          flushBufferedOutput();
          timeout = null;
        }, 100);
      }
    };

    stream.write = chunk => {
      buffer.push(chunk);
      debouncedFlush();
      return true;
    };
  }

  forceFlushBufferedOutput() {
    for (const flushBufferedOutput of this._bufferedOutput) {
      flushBufferedOutput();
    }
  }

  _clearStatus() {
    if (isInteractive()) {
      if (this._globalConfig.useStderr) {
        this._err(this._clear);
      } else {
        this._out(this._clear);
      }
    }
  }

  _printStatus() {
    const { content, clear } = this._status.get();

    this._clear = clear;

    if (isInteractive()) {
      if (this._globalConfig.useStderr) {
        this._err(content);
      } else {
        this._out(content);
      }
    }
  }

  onRunStart(aggregatedResults, options) {
    this._status.runStarted(aggregatedResults, options);
  }

  onTestStart(test) {
    this._status.testStarted(test.path, test.context.config);
  }

  onTestCaseResult(test, testCaseResult) {
    this._status.addTestCaseResult(test, testCaseResult);
  }

  onRunComplete() {
    this.forceFlushBufferedOutput();
    this._status.runFinished();

    process.stdout.write = this._out;
    process.stderr.write = this._err;

    (0, isInteractive() ? process.stderr : process.stdout).clearLine();
  }

  onTestResult(test, testResult, aggregatedResults) {
    this.testFinished(test.context.config, testResult, aggregatedResults);

    if (!testResult.skipped) {
      this.printTestFileHeader(
        testResult.testFilePath,
        test.context.config,
        testResult
      );
      this.printTestFileFailureMessage(
        testResult.testFilePath,
        test.context.config,
        testResult
      );
    }

    this.forceFlushBufferedOutput();
  }

  testFinished(config, testResult, aggregatedResults) {
    this._status.testFinished(config, testResult, aggregatedResults);
  }

  printTestFileHeader(_testPath, config, result) {
    this.log((0, getResultHeader)(result, this._globalConfig, config));

    if (result.console) {
      this.log(
        '  ' +
          TITLE_BULLET +
          'Console\n\n' +
          getConsoleOutput(
            config.cwd,
            !!this._globalConfig.verbose,
            result.console,
            config,
            this._globalConfig
          )
      );
    }
  }

  printTestFileFailureMessage(_testPath, _config, result) {
    if (result.failureMessage) {
      this.log(result.failureMessage);
    }

    const didUpdate = this._globalConfig.updateSnapshot === 'all';
    const snapshotStatuses = getSnapshotStatus(result.snapshot, didUpdate);
    snapshotStatuses.forEach(this.log);
  }
}

exports.default = DefaultReporter;
