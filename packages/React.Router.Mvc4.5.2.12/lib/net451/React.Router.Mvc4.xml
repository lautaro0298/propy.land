<?xml version="1.0"?>
<doc>
    <assembly>
        <name>React.Router.Mvc4</name>
    </assembly>
    <members>
        <member name="T:React.Router.ExecutionResult">
            <summary>
            Contains the context object used during execution in addition to 
            the string result of rendering the React Router component.
            </summary>
        </member>
        <member name="P:React.Router.ExecutionResult.RenderResult">
            <summary>
            String result of ReactDOMServer render of provided component.
            </summary>
        </member>
        <member name="P:React.Router.ExecutionResult.Context">
            <summary>
            Context object used during JS engine execution.
            </summary>
        </member>
        <member name="T:React.Router.HtmlHelperExtensions">
            <summary>
            Render a React StaticRouter Component with context.
            </summary>
        </member>
        <member name="P:React.Router.HtmlHelperExtensions.Environment">
            <summary>
            Gets the React environment
            </summary>
        </member>
        <member name="M:React.Router.HtmlHelperExtensions.ReactRouterWithContext``1(System.Web.Mvc.HtmlHelper,System.String,``0,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Action{System.Web.HttpResponseBase,React.Router.RoutingContext})">
            <summary>
            Render a React StaticRouter Component with context object.
            Can optionally be provided with a custom context handler to handle the various status codes.
            </summary>
            <param name="htmlHelper">MVC Razor <see cref="T:System.Web.Mvc.HtmlHelper"/></param>
            <param name="componentName">Name of React Static Router component. Expose component globally to ReactJS.NET</param>
            <param name="props">Props to initialise the component with</param>
            <param name="path">F.x. from Request.Path. Used by React Static Router to determine context and routing.</param>
            <param name="contextHandler">Optional custom context handler, can be used instead of providing a Response object</param>
            <param name="htmlTag">HTML tag to wrap the component in. Defaults to &lt;div&gt;</param>
            <param name="containerId">ID to use for the container HTML tag. Defaults to an auto-generated ID</param>
            <param name="clientOnly">Skip rendering server-side and only output client-side initialisation code. Defaults to <c>false</c></param>
            <param name="serverOnly">Skip rendering React specific data-attributes during server side rendering. Defaults to <c>false</c></param>
            <param name="containerClass">HTML class(es) to set on the container tag</param>
            <returns><see cref="T:System.Web.IHtmlString"/> containing the rendered markup for provided React Router component</returns>
        </member>
        <member name="M:React.Router.HtmlHelperExtensions.ReactRouter``1(System.Web.Mvc.HtmlHelper,System.String,``0,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Action{System.Web.HttpResponseBase,React.Router.RoutingContext},React.IRenderFunctions)">
            <summary>
            Render a React StaticRouter Component with context object.
            Can optionally be provided with a custom context handler to handle the various status codes.
            </summary>
            <param name="htmlHelper">MVC Razor <see cref="T:System.Web.Mvc.HtmlHelper"/></param>
            <param name="componentName">Name of React Static Router component. Expose component globally to ReactJS.NET</param>
            <param name="props">Props to initialise the component with</param>
            <param name="path">F.x. from Request.Path. Used by React Static Router to determine context and routing.</param>
            <param name="contextHandler">Optional custom context handler, can be used instead of providing a Response object</param>
            <param name="htmlTag">HTML tag to wrap the component in. Defaults to &lt;div&gt;</param>
            <param name="containerId">ID to use for the container HTML tag. Defaults to an auto-generated ID</param>
            <param name="clientOnly">Skip rendering server-side and only output client-side initialisation code. Defaults to <c>false</c></param>
            <param name="serverOnly">Skip rendering React specific data-attributes during server side rendering. Defaults to <c>false</c></param>
            <param name="containerClass">HTML class(es) to set on the container tag</param>
            <param name="renderFunctions">Functions to call during component render</param>
            <returns><see cref="T:System.Web.IHtmlString"/> containing the rendered markup for provided React Router component</returns>
        </member>
        <member name="T:React.Router.ReactEnvironmentExtensions">
            <summary>
            <see cref="T:React.ReactEnvironment"/> extension for rendering a React Router Component with context
            </summary>
        </member>
        <member name="M:React.Router.ReactEnvironmentExtensions.CreateRouterComponent``1(React.IReactEnvironment,System.String,``0,System.String,System.String,System.Boolean)">
            <summary>
            Create a React Router Component with context and add it to the list of components to render client side,
            if applicable.
            </summary>
            <typeparam name="T">Type of the props</typeparam>
            <param name="env">React Environment</param>
            <param name="componentName">Name of the component</param>
            <param name="props">Props to use</param>
            <param name="path">F.x. from Request.Path. Used by React Static Router to determine context and routing.</param>
            <param name="containerId">ID to use for the container HTML tag. Defaults to an auto-generated ID</param>
            <param name="clientOnly">True if server-side rendering will be bypassed. Defaults to false.</param>
            <returns></returns>
        </member>
        <member name="T:React.Router.ReactRouterComponent">
            <summary>
            Represents a React Router JavaScript component.
            </summary>
        </member>
        <member name="F:React.Router.ReactRouterComponent._path">
            <summary>
            F.x. from Request.Path. Used by React Static Router to determine context and routing.
            </summary>
        </member>
        <member name="M:React.Router.ReactRouterComponent.#ctor(React.IReactEnvironment,React.IReactSiteConfiguration,React.IReactIdGenerator,System.String,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:React.Router.ReactRouterComponent"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="configuration">Site-wide configuration.</param>
            <param name="reactIdGenerator">React Id generator.</param>
            <param name="componentName">Name of the component.</param>
            <param name="containerId">The ID of the container DIV for this component</param>
            <param name="path">F.x. from Request.Path. Used by React Static Router to determine context and routing.</param>
        </member>
        <member name="M:React.Router.ReactRouterComponent.RenderRouterWithContext(System.Boolean,System.Boolean,React.IRenderFunctions)">
            <summary>
            Render a React StaticRouter Component with context object.
            </summary>
            <param name="renderContainerOnly">Only renders component container. Used for client-side only rendering. Does not make sense in this context but included for consistency</param>
            <param name="renderServerOnly">Only renders the common HTML mark up and not any React specific data attributes. Used for server-side only rendering.</param>
            <param name="renderFunctions">Functions to call during component render</param>
            <returns>Object containing HTML in string format and the React Router context object</returns>
        </member>
        <member name="M:React.Router.ReactRouterComponent.WriteComponentInitialiser(System.IO.TextWriter)">
            <summary>
            Gets the JavaScript code to initialise the component
            </summary>
            <returns>JavaScript for component initialisation</returns>
        </member>
        <member name="M:React.Router.ReactRouterComponent.RenderJavaScript(System.IO.TextWriter,System.Boolean)">
            <summary>
            Renders the JavaScript required to initialise this component client-side. This will
            initialise the React component, which includes attach event handlers to the
            server-rendered HTML.
            Uses <see cref="T:React.ReactComponent"/> base Component initialiser.
            Client side React Router does not need context nor explicit path parameter.
            </summary>
            <returns>JavaScript</returns>
        </member>
        <member name="T:React.Router.ReactRouterException">
            <summary>
            React Router Exception
            </summary>
        </member>
        <member name="M:React.Router.ReactRouterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:React.Router.ReactRouterException"/> class.
            </summary>
        </member>
        <member name="M:React.Router.ReactRouterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:React.Router.ReactRouterException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:React.Router.ReactRouterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:React.Router.ReactRouterException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:React.Router.ReactRouterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by deserialization
            </summary>
        </member>
        <member name="T:React.Router.ReactRouterFunctions">
            <summary>
            Render functions for React Router
            </summary>
        </member>
        <member name="P:React.Router.ReactRouterFunctions.ReactRouterContext">
            <summary>
            The returned react router context, as a JSON string
            A default value wards off deserialization exceptions
            when server side rendering is disabled
            </summary>
        </member>
        <member name="M:React.Router.ReactRouterFunctions.PreRender(System.Func{System.String,System.String})">
            <summary>
            Implementation of PreRender
            </summary>
            <param name="executeJs"></param>
        </member>
        <member name="M:React.Router.ReactRouterFunctions.PostRender(System.Func{System.String,System.String})">
            <summary>
            Implementation of PostRender
            </summary>
            <param name="executeJs"></param>
        </member>
        <member name="T:React.Router.RoutingContext">
            <summary>
            Context object used during render of React Router component
            </summary>
        </member>
        <member name="P:React.Router.RoutingContext.status">
            <summary>
            HTTP Status Code.
            If present signifies that the given status code should be returned by server.
            </summary>
        </member>
        <member name="P:React.Router.RoutingContext.url">
            <summary>
            URL to redirect to.
            If included this signals that React Router determined a redirect should happen.
            </summary>
        </member>
        <member name="T:React.Router.SetServerResponse">
            <summary>
            Helper class that takes the values in the <see cref="T:React.Router.RoutingContext"/>
            to modify the servers response. 
            F.x. return an http status code of 404 not found
            or redirect the client to a new URL.
            </summary>
        </member>
        <member name="M:React.Router.SetServerResponse.ModifyResponse(React.Router.RoutingContext,System.Web.HttpResponseBase)">
            <summary>
            Uses the values in the <see cref="T:React.Router.RoutingContext"/> to modify
            the servers response. 
            F.x. return an http status code of 404 not found
            or redirect the client to a new URL.
            </summary>
            <param name="context">
            The routing context returned by React Router.
            It contains new values for the server response.
            </param>
            <param name="Response">The response object to use.</param>
        </member>
    </members>
</doc>
